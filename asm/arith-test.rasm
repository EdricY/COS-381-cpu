# Perform multiple instructions on the first two inputs from std-in, assuming they are numbers
    ori $v0, $zero, 0xFFFC # store output address to $v0
    ori $v1, $zero, 0xFFF8 # store input address to $v1

    ori $t0, $zero, 0x30 # ASCII value of '0'
    
    lw $s0, 0($v1)
    lw $s1, 0($v1)
    
    sub $s0, $s0, $t0 # Correct for ASCII input
    sub $s1, $s1, $t0

    ori $a0, $zero, 0x0A #\n
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x73 #s
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x75 #u
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x62 #b
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x3A #:
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x20 #(space)
    sw  $a0, 0($v0)

    sub $t1, $s0, $s1
    addi $t1, $t1, 0x30 # Convert for ASCII output
    sw $t1, 0($v0)

    ori $a0, $zero, 0x0A #\n
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x61 #a
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x64 #d
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x64 #d
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x3A #:
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x20 #(space)
    sw  $a0, 0($v0)

    add $t1, $s0, $s1
    addi $t1, $t1, 0x30 # Convert for ASCII output
    sw $t1, 0($v0)

    ori $a0, $zero, 0x0A #\n
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x61 #a
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x64 #d
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x64 #d
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x75 #u
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x3A #:
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x20 #(space)
    sw  $a0, 0($v0)

    addu $t1, $s0, $s1
    addi $t1, $t1, 0x30 # Convert for ASCII output
    sw $t1, 0($v0)

    ori $a0, $zero, 0x0A #\n
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x6E #n
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x6F #o
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x72 #r
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x3A #:
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x20 #(space)
    sw  $a0, 0($v0)

    nor $t1, $s0, $s1
    addi $t1, $t1, 0x30 # Convert for ASCII output
    sw $t1, 0($v0)

    ori $a0, $zero, 0x0A #\n
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x73 #s
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x6C #l
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x6C #l
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x3A #:
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x20 #(space)
    sw  $a0, 0($v0)

    add $t1, $s0, $zero
    sll $t1, $t1, 2
    addi $t1, $t1, 0x30 # Convert for ASCII output
    sw $t1, 0($v0)

    ori $a0, $zero, 0x0A #\n
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x73 #s
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x72 #r
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x6C #l
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x3A #:
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x20 #(space)
    sw  $a0, 0($v0)

    add $t1, $s0, $zero
    srl $t1, $t1, 2
    addi $t1, $t1, 0x30 # Convert for ASCII output
    sw $t1, 0($v0)

    ori $a0, $zero, 0x0A #\n
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x78 #x
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x6F #o
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x72 #r
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x3A #:
    sw  $a0, 0($v0)
    ori $a0, $zero, 0x20 #(space)
    sw  $a0, 0($v0)

    xor $t1, $s0, $s1
    addi $t1, $t1, 0x30 # Convert for ASCII output
    sw $t1, 0($v0)

    ori $a0, $zero, 0x0A #\n
    sw  $a0, 0($v0)

    halt


